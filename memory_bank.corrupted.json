[
  {
    "id": "cli-001",
    "title": "Inject CLI utility for task listing",
    "status": "pending",
    "description": "TBD",
    "priority": "medium",
    "version": "v1.0",
    "tags": [
      "task",
      "agent",
      "llm"
    ],
    "trigger": "manual",
    "agent": "unassigned",
    "task_id": "task-tbd"
  },
  {
    "id": "cli-002",
    "title": "Implement agent status tracker in memory",
    "status": "pending",
    "description": "TBD",
    "priority": "medium",
    "version": "v1.0",
    "tags": [
      "task",
      "agent",
      "llm"
    ],
    "trigger": "manual",
    "agent": "unassigned",
    "task_id": "task-tbd"
  },
  {
    "id": "cli-003",
    "title": "Render task dashboard in terminal or markdown",
    "status": "pending",
    "description": "TBD",
    "priority": "medium",
    "version": "v1.0",
    "tags": [
      "task",
      "agent",
      "llm"
    ],
    "trigger": "manual",
    "agent": "unassigned",
    "task_id": "task-tbd"
  },
  {
    "agent": "llm-assistant",
    "task_id": "continuous-evolution-cycle",
    "description": "Let agents self-generate, prioritize, and execute future iterations of framework improvements based on logs, state, and feedback.",
    "priority": "high",
    "status": "completed",
    "trigger": "growth-loop",
    "tags": [
      "evolution",
      "simulation",
      "llm",
      "feedback",
      "growth"
    ]
  },
  {
    "agent": "planner",
    "task_id": "agent-goal-generation",
    "description": "Each agent reflects on logs, tasks, specs, and current state to generate meaningful next-step goals and evolution roadmap entries.",
    "priority": "high",
    "status": "completed",
    "trigger": "evolution-feedback",
    "tags": [
      "roadmap",
      "goals",
      "evolution",
      "multi-agent"
    ]
  },
  {
    "agent": "docbot",
    "task_id": "docbot-onboarding-doc",
    "description": "Generate a clear onboarding doc that introduces users to agent roles, pipelines, memory, and task system.",
    "priority": "high",
    "status": "completed",
    "trigger": "roadmap-evolution",
    "tags": [
      "onboarding",
      "documentation"
    ]
  },
  {
    "agent": "schemaenforcer",
    "task_id": "schema-version-lock",
    "description": "Make schema-config.json version-aware with backwards compatibility support and changelog.",
    "priority": "high",
    "status": "completed",
    "trigger": "roadmap-evolution",
    "tags": [
      "schema",
      "versioning"
    ]
  },
  {
    "agent": "feedbacker",
    "task_id": "feedbacker-monthly-summary",
    "description": "Summarize log-based execution results by agent, task, and time period.",
    "priority": "medium",
    "status": "completed",
    "trigger": "roadmap-evolution",
    "tags": [
      "feedback",
      "summary"
    ]
  },
  {
    "agent": "llm-assistant",
    "task_id": "llm-routing-runtime",
    "description": "Add capability for llm-assistant to dynamically suggest alternate task paths during execution",
    "priority": "high",
    "status": "completed",
    "trigger": "roadmap-evolution",
    "tags": [
      "routing",
      "llm",
      "assist"
    ]
  },
  {
    "agent": "llm-assistant",
    "task_id": "discovery-intent-cycle",
    "description": "Let agents propose and align around the next major phase based on internal memory, logs, and feature growth.",
    "priority": "high",
    "status": "completed",
    "trigger": "feedback-loop",
    "tags": [
      "discovery",
      "intent",
      "next-evolution"
    ]
  },
  {
    "agent": "planner",
    "task_id": "planner-timeline-cycles",
    "description": "Define scheduled goal targets with expected timelines and retro review triggers.",
    "priority": "high",
    "status": "completed",
    "trigger": "intent-v18",
    "tags": [
      "timeline",
      "planner",
      "schedule"
    ]
  },
  {
    "agent": "docbot",
    "task_id": "docbot-version-changelog",
    "description": "Generate docs summarizing changes for each past release (v1 \u2192 v18).",
    "priority": "medium",
    "status": "completed",
    "trigger": "intent-v18",
    "tags": [
      "docs",
      "changelog",
      "versions"
    ]
  },
  {
    "agent": "schemaenforcer",
    "task_id": "schema-runtime-validation",
    "description": "Inject dynamic validation for schema fields in active configurations.",
    "priority": "high",
    "status": "completed",
    "trigger": "intent-v18",
    "tags": [
      "schema",
      "validation",
      "runtime"
    ]
  },
  {
    "agent": "llm-assistant",
    "task_id": "llm-context-suggestions",
    "description": "Trigger suggestion logic from logs, memory, pipeline state while LLM operates.",
    "priority": "high",
    "status": "completed",
    "trigger": "intent-v18",
    "tags": [
      "llm",
      "routing",
      "context"
    ]
  },
  {
    "agent": "feedbacker",
    "task_id": "feedbacker-anomaly-detection",
    "description": "Scan logs over time and surface unexpected task or agent behaviors.",
    "priority": "medium",
    "status": "completed",
    "trigger": "intent-v18",
    "tags": [
      "feedback",
      "anomaly",
      "logs"
    ]
  },
  {
    "agent": "planner",
    "task_id": "planner-milestone-calendar",
    "description": "Introduce due dates, time-based triggers and planning hooks into task flow.",
    "priority": "high",
    "status": "completed",
    "trigger": "intent-v19",
    "tags": [
      "milestone",
      "calendar",
      "planner"
    ]
  },
  {
    "agent": "docbot",
    "task_id": "docbot-summary-cards",
    "description": "Summarize each documentation file into LLM-friendly metadata cards.",
    "priority": "medium",
    "status": "completed",
    "trigger": "intent-v19",
    "tags": [
      "docs",
      "summary",
      "cards"
    ]
  },
  {
    "agent": "schemaenforcer",
    "task_id": "schema-diff-viewer",
    "description": "Generate a diff viewer between schema-config versions with changelog projection.",
    "priority": "high",
    "status": "completed",
    "trigger": "intent-v19",
    "tags": [
      "schema",
      "diff",
      "tools"
    ]
  },
  {
    "agent": "llm-assistant",
    "task_id": "llm-memory-tracker",
    "description": "Track and visualize memory impact by execution thread for future optimization.",
    "priority": "medium",
    "status": "completed",
    "trigger": "intent-v19",
    "tags": [
      "llm",
      "memory",
      "runtime"
    ]
  },
  {
    "agent": "feedbacker",
    "task_id": "feedbacker-trend-analysis",
    "description": "Aggregate execution log signals and generate weekly reports.",
    "priority": "medium",
    "status": "completed",
    "trigger": "intent-v19",
    "tags": [
      "feedback",
      "trend",
      "logs"
    ]
  },
  {
    "agent": "llm-assistant",
    "task_id": "framework-live-deployment-mode",
    "description": "Activate real-time mode where all LLM interactions follow and modify framework state live.",
    "priority": "critical",
    "status": "active",
    "trigger": "user-declared-live-use",
    "tags": [
      "live",
      "deployment",
      "orchestration",
      "framework"
    ]
  },
  {
    "agent": "llm-assistant",
    "task_id": "rebuild-core-structure",
    "description": "Recreate any missing directories under core/ required for checklists, identities, and routines.",
    "priority": "critical",
    "status": "completed",
    "trigger": "live-repair",
    "tags": [
      "infrastructure",
      "repair",
      "core",
      "live-mode"
    ]
  },
  {
    "agent": "llm-assistant",
    "task_id": "trigger-user-checklist",
    "description": "Trigger checklist to validate live session structure, agent alignment, and readiness for continuous ops.",
    "priority": "critical",
    "status": "completed",
    "trigger": "user-live-init",
    "tags": [
      "checklist",
      "live",
      "human-user"
    ]
  },
  {
    "agent": "feedbacker",
    "task_id": "feedback-loop-from-user",
    "description": "Use feedbacker to simulate summary of issues or needs based on human-user\u2019s live session logs.",
    "priority": "high",
    "status": "completed",
    "trigger": "user-live-init",
    "tags": [
      "feedback",
      "user",
      "live-mode"
    ]
  },
  {
    "agent": "planner",
    "task_id": "agent-alignment-scan",
    "description": "Ensure that all agent responsibilities and pipelines align with user identity goals and checklist.",
    "priority": "high",
    "status": "completed",
    "trigger": "user-live-init",
    "tags": [
      "alignment",
      "identity",
      "pipeline"
    ]
  },
  {
    "agent": "planner",
    "task_id": "user-goal-setting",
    "description": "Generate, log, and execute user-proposed goals based on current framework state and evolution needs.",
    "priority": "high",
    "status": "completed",
    "trigger": "live-user-postcheck",
    "tags": [
      "goal",
      "user",
      "intent"
    ]
  },
  {
    "agent": "feedbacker",
    "task_id": "log-replay-for-improvement",
    "description": "Let feedbacker and llm-assistant replay logs to surface blind spots or drift in behavior.",
    "priority": "high",
    "status": "completed",
    "trigger": "live-user-postcheck",
    "tags": [
      "log",
      "drift",
      "gap-detection"
    ]
  },
  {
    "agent": "llm-assistant",
    "task_id": "snapshot-live-user-release",
    "description": "Package current working version with all identity and feedback cycles completed after human-user integration.",
    "priority": "medium",
    "status": "completed",
    "trigger": "live-user-postcheck",
    "tags": [
      "release",
      "snapshot",
      "user"
    ]
  },
  {
    "agent": "structurekeeper",
    "task_id": "refactor-root-structure",
    "description": "Move non-core README and config files into organized folders like /docs and /meta to keep root clean.",
    "priority": "high",
    "status": "completed",
    "trigger": "live-reorg-cleanup",
    "tags": [
      "structure",
      "docs",
      "organization"
    ]
  },
  {
    "agent": "llm-assistant",
    "task_id": "generate-file-router",
    "description": "Scan project files and write a file-router map linking metadata, agents, tasks, and purpose of each file.",
    "priority": "high",
    "status": "completed",
    "trigger": "live-reorg-cleanup",
    "tags": [
      "routing",
      "metadata",
      "index"
    ]
  },
  {
    "agent": "docbot",
    "task_id": "update-checklist-doc-links",
    "description": "Patch routines, checklists, and identity files to reflect new routing paths after folder restructure.",
    "priority": "medium",
    "status": "completed",
    "trigger": "live-reorg-cleanup",
    "tags": [
      "patch",
      "docs",
      "routing"
    ]
  },
  {
    "agent": "llm-assistant",
    "task_id": "audit-v21-before-v22",
    "description": "Trigger pipeline+checklist+routine audits to confirm everything is valid and ready for v22.",
    "priority": "critical",
    "status": "completed",
    "trigger": "live-reorg-cleanup",
    "tags": [
      "audit",
      "release",
      "checklist",
      "pipeline"
    ]
  },
  {
    "agent": "structurekeeper",
    "task_id": "create-pipeline-folder",
    "description": "Ensure pipelines folder exists so agents can run their orchestration triggers.",
    "priority": "critical",
    "status": "completed",
    "trigger": "audit-v21-fix",
    "tags": [
      "fix",
      "folder",
      "agent",
      "pipelines"
    ]
  },
  {
    "agent": "llm-assistant",
    "task_id": "regenerate-file-router",
    "description": "Scan all content and embed type, tags, linked agent, task purpose into file-router.",
    "priority": "high",
    "status": "completed",
    "trigger": "audit-v21-fix",
    "tags": [
      "fix",
      "metadata",
      "routing"
    ]
  },
  {
    "agent": "planner",
    "task_id": "begin-v23-cycle",
    "description": "Initialize v23 intents and execution roadmap from recent audits and improvements.",
    "priority": "high",
    "status": "completed",
    "trigger": "v22-closeout",
    "tags": [
      "v23",
      "roadmap",
      "next-cycle"
    ]
  },
  {
    "agent": "planner",
    "task_id": "expand-longterm-agents",
    "description": "Define agents like `governor`, `resiliencebot`, `simulant`, and related checklists/pipelines.",
    "priority": "medium",
    "status": "completed",
    "trigger": "v22-closeout",
    "tags": [
      "agents",
      "governance",
      "scaling"
    ]
  },
  {
    "agent": "docbot",
    "task_id": "review-checklist-coverage",
    "description": "Ensure all checklists in core/checklists are actively linked to agents, routines, or identities.",
    "priority": "medium",
    "status": "completed",
    "trigger": "v22-closeout",
    "tags": [
      "checklist",
      "linkage",
      "coverage"
    ]
  },
  {
    "agent": "structurekeeper",
    "task_id": "fix-missing-core-agents",
    "description": "Auto-generate required folder to complete framework compliance.",
    "priority": "high",
    "status": "completed",
    "trigger": "v22-final-audit",
    "tags": [
      "fix",
      "structure",
      "compliance"
    ]
  },
  {
    "id": "task-fix-logs-v1",
    "title": "Fix Logging System",
    "description": "Ensure task execution logs are persisted and packaged with framework releases. Add structured logging to real-time interactions and update generate_framework_zip.py.",
    "domain": "logging",
    "agent": "agent.log.guardian",
    "status": "completed",
    "priority": "high",
    "created_by": "framework-orchestrator",
    "checklist": [
      "Audit where logs should be persisted",
      "Implement or patch logging hooks in task execution pipeline",
      "Ensure logs/executions/ directory is created and populated",
      "Update generate_framework_zip.py to include relevant logs",
      "Validate with a mock run"
    ]
  },
  {
    "id": "task-fix-cli-v1",
    "title": "Expand CLI Capabilities",
    "description": "Improve CLI with onboarding, helper guides, simulated task runs, and testing. Include CLI simulation and replay mode using prompt-replay.json.",
    "domain": "cli",
    "agent": "agent.cli.builder",
    "status": "completed",
    "priority": "medium",
    "created_by": "framework-orchestrator",
    "checklist": [
      "Review existing CLI implementation or scaffold new CLI structure",
      "Add onboarding and simulated task flags",
      "Integrate prompt-replay.json as test source",
      "Write CLI documentation in docs/cli-guide.md",
      "Create CLI interaction logs"
    ]
  }
]